# Python OOP Concepts Demonstration

# Class: Blueprint for creating objects
class Car:
    def __init__(self, brand, model):    # Constructor method
        self.brand = brand
        self.model = model
    
    def display_info(self):
        return f"{self.brand} {self.model}"

# Inheritance: ElectricCar inherits from Car
class ElectricCar(Car):
    def __init__(self, brand, model, battery_size):
        super().__init__(brand, model)    # Call parent class constructor
        self.battery_size = battery_size
    
    def get_battery_info(self):
        return f"Battery capacity: {self.battery_size} kWh"

# Encapsulation: Hide internal details using private attributes
class BankAccount:
    def __init__(self):
        self.__balance = 0    # Private attribute (__)
    
    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
    
    def get_balance(self):
        return self.__balance

# Polymorphism: Different classes sharing same method name
class Animal:
    def speak(self): pass

class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"

# Static and Class Methods demonstration
class Math:
    @staticmethod    # Method that doesn't need class instance
    def add(x, y):
        return x + y
    
    @classmethod    # Method that works with class
    def multiply(cls, x, y):
        return x * y

# Usage examples
if __name__ == "__main__":
    # Create and use objects
    my_car = Car("Toyota", "Camry")
    tesla = ElectricCar("Tesla", "Model 3", 75)
    
    account = BankAccount()
    account.deposit(1000)
    
    dog, cat = Dog(), Cat()
    
    # Print results
    print(my_car.display_info())          # Toyota Camry
    print(tesla.get_battery_info())       # Battery capacity: 75 kWh
    print(account.get_balance())          # 1000
    print(dog.speak(), cat.speak())       # Woof! Meow!
    print(Math.add(5, 3))                 # 8
