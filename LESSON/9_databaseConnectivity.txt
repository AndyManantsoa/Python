# Python MongoDB Connectivity with PyMongo

# 1. Installation
# First, install pymongo using pip:
# pip install pymongo

# 2. Import the required module
from pymongo import MongoClient

# 3. Connect to MongoDB
# Create a client instance
client = MongoClient('mongodb://localhost:27017/')

# 4. Create/Access a database
db = client['mydatabase']

# 5. Create/Access a collection
collection = db['customers']

# 6. Basic CRUD Operations

# Insert One Document
customer = {
    "name": "John Doe",
    "email": "john@example.com",
    "age": 30
}
result = collection.insert_one(customer)
print("Inserted ID:", result.inserted_id)

# Insert Multiple Documents
customers = [
    {"name": "Jane Smith", "email": "jane@example.com", "age": 25},
    {"name": "Bob Johnson", "email": "bob@example.com", "age": 35}
]
result = collection.insert_many(customers)
print("Inserted IDs:", result.inserted_ids)

# Find One Document
one_customer = collection.find_one({"name": "John Doe"})
print("Found customer:", one_customer)

# Find Multiple Documents
all_customers = collection.find()
for customer in all_customers:
    print(customer)

# Update One Document
update_result = collection.update_one(
    {"name": "John Doe"},
    {"$set": {"age": 31}}
)
print("Modified count:", update_result.modified_count)

# Delete One Document
delete_result = collection.delete_one({"name": "John Doe"})
print("Deleted count:", delete_result.deleted_count)

# Close the connection
client.close()

Common MongoDB operations:
- find(): Query documents
- insert_one(): Insert a single document
- insert_many(): Insert multiple documents
- update_one(): Update a single document
- update_many(): Update multiple documents
- delete_one(): Delete a single document
- delete_many(): Delete multiple documents
- count_documents(): Count documents in a collection

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

# Python MySQL Connectivity with MySQL Connector

# 1. Installation
# First, install mysql-connector-python:
# pip install mysql-connector-python

# 2. Import the required module
import mysql.connector

# 3. Establish connection
db = mysql.connector.connect(
    host="localhost",
    user="yourusername",
    password="yourpassword",
    database="mydatabase"
)

# 4. Create a cursor object
cursor = db.cursor()

# 5. Basic CRUD Operations

# Create a table
cursor.execute("""
    CREATE TABLE IF NOT EXISTS customers (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255),
        email VARCHAR(255),
        age INT
    )
""")

# Insert One Record
sql = "INSERT INTO customers (name, email, age) VALUES (%s, %s, %s)"
values = ("John Doe", "john@example.com", 30)
cursor.execute(sql, values)
db.commit()
print("1 record inserted, ID:", cursor.lastrowid)

# Insert Multiple Records
sql = "INSERT INTO customers (name, email, age) VALUES (%s, %s, %s)"
values = [
    ("Jane Smith", "jane@example.com", 25),
    ("Bob Johnson", "bob@example.com", 35)
]
cursor.executemany(sql, values)
db.commit()
print(cursor.rowcount, "records inserted")

# Select Records
cursor.execute("SELECT * FROM customers")
result = cursor.fetchall()
for row in result:
    print(row)

# Update Record
sql = "UPDATE customers SET age = %s WHERE name = %s"
values = (31, "John Doe")
cursor.execute(sql, values)
db.commit()
print(cursor.rowcount, "record(s) updated")

# Delete Record
sql = "DELETE FROM customers WHERE name = %s"
value = ("John Doe",)
cursor.execute(sql, value)
db.commit()
print(cursor.rowcount, "record(s) deleted")

# Close connection
cursor.close()
db.close()

# Common MySQL operations:
# execute(): Execute a single SQL query
# executemany(): Execute same query with different values
# fetchall(): Fetch all rows
# fetchone(): Fetch single row
# commit(): Save changes
# rollback(): Roll back changes