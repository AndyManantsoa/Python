List is collection of disimilar elements where we can store multiple data using [] separated by comma

-> list is mutable and we can store multiple datatypes

-> we can create list with two ways:
    1/ l = []
    2/ l = list()

-> to insert values:
    1/ l=[1,2,3.4,"hello",True]
    2/ l=list([[1,2,3.4,"hello",True]])

-> to fetch elements from list:
    1/ By indexing: print(l[0])
    2/ By slicing: print(l[start:end:gap]) #you can use negative index

-> To add data in a list:
    1/ by indexing: ex: l[2]="Hello"
    2/ by slicing: ex: l[1:3]=[1,2,3] #it will override the previous elements
    3/ by using append("element"): ex: l.append("hello") #it will be insterted after the last element in the list
    4/ by using insert(index, element): ex: l.insert(3,"hello") #it will be inserted at the index 3
                             and move the other element after 3 by index +1
    5/ by using extend() ex: extend([1,2,3,4]) #insert at last but can insert multiple values unlike append

-> To delete elements in a list:
    1/ by using pop(): it removes the last element by default unless we take index, and it returns the deleted element
    2/ by using remove("element") : it removes the actual element as inserted parameter
    3/ by using del attribute: delete the whole variable. ex: del l;
                                it can also delete some part using slicing: ex: del l[1:3]
    4/

-> some additional functions:
    - count(x): counts the x elements in the list (Boolean value True and False are considered as 1,0 respectively)
    - index(value): to find the index number of inserted value, and if there are matching values then it returns the index of first elements found
                    l.index(1,4) : means it will search indef of element 1 starting from index 4
    - to copy:
        deep copy: ex: j=l # both are having the same address, if we modify any one then it will be happening in both
        shallow copy: ex j = l.copy  #create new address for the new variable, if any edits are done in any, then it will not affect the other
    - to sort:
        l.sort(): modify and sort the list in ascending order
        l.sort(reverse=True): to sort in descending order we use 
        sorted(l): to sort the list and is used for printing and doesn't affect the original list

    - ord('ASCII'): To find the ASCII value of element
    - reverse(): To reverse the list 
    - len(): Provides the length of the list
    - max(value): returns the max element
    - min(value): returns the min element

